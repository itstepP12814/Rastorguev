#include <iostream>
#include <string.h>
  using namespace std;

class string_
{
private:
	char *str;

	int lenght;

public:
	string_(){ str = NULL; lenght = 0; };

	string_(char *s);

	string_(const string_ &s);

	~string_()
	{
		delete[] str;
	};

	string_& operator=(const string_ &s);
	string_ operator*(const string_ &s);

	const void Show()const
	{
		cout << str << "\n";

	}

};

string_::string_(char *s)
{

	lenght = strlen(s);

	str = new char[lenght + 1];

	strcpy(str, s);

};


string_::string_(const string_ &s)
{
	lenght = s.lenght;

	str = new char[lenght + 1];

	strcpy(str, s.str);

};


string_& string_:: operator=(const string_ &s)
{

	if (this == &s)
	{
		return *this;
	}

	if (lenght != s.lenght || lenght == 0)
	{

		delete[] str;
		lenght = s.lenght;
		str = new char[lenght + 1];

	}

	strcpy(str, s.str);
	return *this;

};
string_ string_:: operator*(const string_ &s)
{
	int k = 0;
	string_ temp;
	temp.lenght = lenght + s.lenght;
	temp.str = new char[temp.lenght + 1];

	for (int i = 0; i < lenght; i++)
	{
		for (int j = 0; j < s.lenght; j++)
		{

			if (str[i] == s.str[j])
			{
				temp.str[k] = str[i];
				k++;
			}
		}
	}
	temp.str[k] = '\0';
	return temp;
};
int main()
{

	string_ a("djvnd");
	string_ b("wijccwke");

	string_ c;
	c = a*b;
	c.Show();



}
